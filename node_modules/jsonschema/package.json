{
  "author": {
    "name": "Tom de Grunt",
    "email": "tom@degrunt.nl"
  },
  "name": "jsonschema",
  "version": "1.1.1",
  "license": "MIT",
  "dependencies": {},
  "contributors": [
    {
      "name": "Austin Wright"
    }
  ],
  "main": "./lib",
  "typings": "./lib/index.d.ts",
  "devDependencies": {
    "mocha": "~1.8.2",
    "chai": "~1.5.0"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "keywords": [
    "json",
    "schema",
    "jsonschema",
    "validator",
    "validation"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/tdegrunt/jsonschema.git"
  },
  "description": "A fast and easy to use JSON Schema validator",
  "scripts": {
    "test": "mocha -R spec"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/tdegrunt/jsonschema.svg)](http://travis-ci.org/tdegrunt/jsonschema)\r\n\r\n# jsonschema\r\n[JSON schema](http://json-schema.org/) validator, which is designed to be fast and simple to use.\r\nThe latest IETF published draft is v4, this library is mostly v4 compatible.\r\n\r\n## Contributing & bugs\r\nPlease fork the repository, make the changes in your fork and include tests. Once you're done making changes, send in a pull request.\r\n\r\n### Bug reports\r\nPlease include a test which shows why the code fails.\r\n\r\n## Usage\r\n\r\n### Simple\r\nSimple object validation using JSON schemas.\r\n\r\n```javascript\r\n  var Validator = require('jsonschema').Validator;\r\n  var v = new Validator();\r\n  var instance = 4;\r\n  var schema = {\"type\": \"number\"};\r\n  console.log(v.validate(instance, schema));\r\n```\r\n\r\n### Even simpler\r\n\r\n```javascript\r\n  var validate = require('jsonschema').validate;\r\n  console.log(validate(4, {\"type\": \"number\"}));\r\n```\r\n\r\n### Complex example, with split schemas and references\r\n\r\n```javascript\r\n  var Validator = require('jsonschema').Validator;\r\n  var v = new Validator();\r\n\r\n  // Address, to be embedded on Person\r\n  var addressSchema = {\r\n    \"id\": \"/SimpleAddress\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n      \"lines\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\"type\": \"string\"}\r\n      },\r\n      \"zip\": {\"type\": \"string\"},\r\n      \"city\": {\"type\": \"string\"},\r\n      \"country\": {\"type\": \"string\"}\r\n    },\r\n    \"required\": [\"country\"]\r\n  };\r\n\r\n  // Person\r\n  var schema = {\r\n    \"id\": \"/SimplePerson\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n      \"name\": {\"type\": \"string\"},\r\n      \"address\": {\"$ref\": \"/SimpleAddress\"},\r\n      \"votes\": {\"type\": \"integer\", \"minimum\": 1}\r\n    }\r\n  };\r\n\r\n  var p = {\r\n    \"name\": \"Barack Obama\",\r\n    \"address\": {\r\n      \"lines\": [ \"1600 Pennsylvania Avenue Northwest\" ],\r\n      \"zip\": \"DC 20500\",\r\n      \"city\": \"Washington\",\r\n      \"country\": \"USA\"\r\n    },\r\n    \"votes\": \"lots\"\r\n  };\r\n\r\n  v.addSchema(addressSchema, '/SimpleAddress');\r\n  console.log(v.validate(p, schema));\r\n```\r\n\r\nFor a comprehensive, annotated example illustrating all possible validation options, see [examples/all.js](./examples/all.js)\r\n\r\n## Features\r\n\r\n### Definitions\r\nAll schema definitions are supported, $schema is ignored.\r\n\r\n### Types\r\nAll types are supported\r\n\r\n### Formats\r\n#### Disabling the format keyword.\r\n\r\nYou may disable format validation by providing `disableFormat: true` to the validator\r\noptions.\r\n\r\n#### String Formats\r\nAll formats are supported, phone numbers are expected to follow the [E.123](http://en.wikipedia.org/wiki/E.123) standard.\r\n\r\n#### Custom Formats\r\nYou may add your own custom format functions.  Format functions accept the input\r\nbeing validated and return a boolean value.  If the returned value is `true`, then\r\nvalidation succeeds.  If the returned value is `false`, then validation fails.\r\n\r\n* Formats added to `Validator.prototype.customFormats` do not affect previously instantiated\r\nValidators.  This is to prevent validator instances from being altered once created.\r\nIt is conceivable that multiple validators may be created to handle multiple schemas\r\nwith different formats in a program.\r\n* Formats added to `validator.customFormats` affect only that Validator instance.\r\n\r\nHere is an example that uses custom formats:\r\n\r\n```\r\nValidator.prototype.customFormats.myFormat = function(input) {\r\n  return input === 'myFormat';\r\n};\r\n\r\nvar validator = new Validator();\r\nvalidator.validate('myFormat', {type: 'string', format: 'myFormat'}).valid; // true\r\nvalidator.validate('foo', {type: 'string', format: 'myFormat'}).valid; // false\r\n```\r\n\r\n### Results\r\nThe first error found will be thrown as an `Error` object if `options.throwError` is `true`.  Otherwise all results will be appended to the `result.errors` array which also contains the success flag `result.valid`.\r\n\r\nWhen `oneOf` or `anyOf` validations fail, errors that caused any of the sub-schemas referenced therein to fail are not reported, unless `options.nestedErrors` is truthy. This option may be useful when troubleshooting validation errors in complex schemas. \r\n\r\n### Custom properties\r\nSpecify your own JSON Schema properties with the validator.attributes property:\r\n\r\n```javascript\r\nvalidator.attributes.contains = function validateContains(instance, schema, options, ctx) {\r\n  if(typeof instance!='string') return;\r\n  if(typeof schema.contains!='string') throw new jsonschema.SchemaError('\"contains\" expects a string', schema);\r\n  if(instance.indexOf(schema.contains)<0){\r\n    return 'does not contain the string ' + JSON.stringify(schema.contains);\r\n  }\r\n}\r\nvar result = validator.validate(\"i am an instance\", { type:\"string\", contains: \"i am\" });\r\n// result.valid === true;\r\n```\r\n\r\nThe instance passes validation if the function returns nothing. A single validation error is produced\r\nif the fuction returns a string. Any number of errors (maybe none at all) may be returned by passing a\r\n`ValidatorResult` object, which may be used like so:\r\n\r\n```javascript\r\n  var result = new ValidatorResult(instance, schema, options, ctx);\r\n  while(someErrorCondition()){\r\n    result.addError('fails some validation test');\r\n  }\r\n  return result;\r\n```\r\n\r\n### Dereferencing schemas\r\nSometimes you may want to download schemas from remote sources, like a database, or over HTTP. When importing a schema,\r\nunknown references are inserted into the `validator.unresolvedRefs` Array. Asynchronously shift elements off this array and import\r\nthem:\r\n\r\n```javascript\r\n  var Validator = require('jsonschema').Validator;\r\n  var v = new Validator();\r\n  v.addSchema(initialSchema);\r\n  function importNextSchema(){\r\n    var nextSchema = v.unresolvedRefs.shift();\r\n    if(!nextSchema){ done(); return; }\r\n    databaseGet(nextSchema, function(schema){\r\n      v.addSchema(schema);\r\n      importNextSchema();\r\n    });\r\n  }\r\n  importNextSchema();\r\n```\r\n\r\n## Tests\r\nUses [JSON Schema Test Suite](https://github.com/json-schema/JSON-Schema-Test-Suite) as well as our own tests.\r\nYou'll need to update and init the git submodules:\r\n\r\n    git submodule update --init\r\n    npm test\r\n\r\n## Contributions\r\n\r\nThis library would not be possible without the valuable contributions by:\r\n\r\n- Austin Wright\r\n\r\n... and many others!\r\n\r\n## License\r\n\r\n    jsonschema is licensed under MIT license.\r\n\r\n    Copyright (C) 2012-2015 Tom de Grunt <tom@degrunt.nl>\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n    this software and associated documentation files (the \"Software\"), to deal in\r\n    the Software without restriction, including without limitation the rights to\r\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n    of the Software, and to permit persons to whom the Software is furnished to do\r\n    so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "gitHead": "9198a7373fb16b491f4ba1a8e8c9018af767dc52",
  "bugs": {
    "url": "https://github.com/tdegrunt/jsonschema/issues"
  },
  "homepage": "https://github.com/tdegrunt/jsonschema#readme",
  "_id": "jsonschema@1.1.1",
  "_shasum": "e0ef5f6e29fa7a985d0fb609521758f0be46c2b6",
  "_from": "..\\jsonschema",
  "_resolved": "file:..\\jsonschema"
}
